/*
 	Copyright 2015 Francisco Javier Martinez Garcia
	Copyright 2015 Alvaro Perez Corral
	Copyright 2015 Luis Valero Martin
	Copyright 2015 Adrian Vizcaino Gonzalez
	This file is part of Through the galaxy.
	Through the galaxy is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	any later version.
	Through the galaxy is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	You should have received a copy of the GNU General Public License
	along with Through the galaxy.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Map.h"
#include "MapEntity.h"

#include <log.h>

#include <cassert>

namespace Map
{
	const char* const LOG_CMAP = "Map::CMap";
	CMap* CMap::m_instance = 0;

	CMap::CMap()
	{
		m_instance = this;
	}
	CMap::~CMap()
	{
		releaseEntityList();
		m_instance = 0;
	}

	bool CMap::init()
	{
		assert(!m_instance && "Second initialization of Map::CMap is not allowed!");

		log_trace(LOG_CMAP,"Init\n");

		new CMap();

		return true;
	}
	
	void CMap::release()
	{
		assert(m_instance && "Map::CMap hasn't been initialized!");

		log_trace(LOG_CMAP,"Release\n");

		if(m_instance)
		{
			delete m_instance;
		}
	}

	bool CMap::parseFile(const std::string &filename)
	{
		log_trace(LOG_CMAP,"Parsing file %s...\n",filename.c_str());

		//Since we only want one of the singletons to have an entity list we have to erase both before creating or loading any
		releaseEntityList();

		/*
			depending on the name this method should call to the appropriate method 
			to generate the scene...
			I recommend using names with three numbers for the planets,
			two for the systems and one for the galaxy. 
			So is easy to know which method use to generate.
			Example:
			planet name -> 0001_0003_0004 -> means galaxy 1, system 3 and planet 4, aditional information may be needed in order to describe the scene
			system name -> 0001_0002 -> means galaxy 1, system 2
			galaxy name -> 0001 -> means galaxy 1
		*/

		if(filename.c_str()[0] >= '0' && filename.c_str()[0] <= '9' && filename.c_str()[1] >= '0' && filename.c_str()[1] <= '9' &&
			filename.c_str()[2] >= '0' && filename.c_str()[2] <= '9' && filename.c_str()[3] >= '0' && filename.c_str()[3] <= '9')
		{

			size_t count = std::count(filename.begin(),filename.end(), '_');

			if(count == 0) 
			{
				m_entityList = m_mapGenerator.generateGalaxy(filename);
			}
			else if(count == 1)
			{
				m_entityList = m_mapGenerator.generateSystem(filename);
			}
			else if(count >= 2)
			{
				m_entityList = m_mapGenerator.generatePlanet(filename);
			}
		}
		else
		{
			/*
				If it´s not a code then we try to load the file
			*/
			m_mapParser.parseFile(filename);
			m_entityList =m_mapParser.getEntityList();
			m_mapParser.emptyEntityList();
			
		}

		return true;
	}

	void CMap::releaseEntityList()
	{
		//This class takes ownership of the entityLists generated by the Map parser & generator so it´s in charge of deleting the entities
		while(!m_entityList.empty())
		{
			CMapEntity* entityInProgress = m_entityList.back();
			m_entityList.pop_back();
			delete entityInProgress;
		}
	}

}